{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\arvin\\\\OneDrive\\\\Desktop\\\\project2\\\\alumni-verse\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useEffect, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { loginStart, loginSuccess, loginFailure, logout as logoutAction, clearError as clearErrorAction, setCredentials } from \"../features/auth/authSlice\";\nimport api from \"../utils/api\";\nimport { API_CONFIG } from \"../config/config\";\nimport { safeLocalStorage } from \"../utils/safeLocalStorage\";\n\n// Create the auth context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const {\n    user,\n    token,\n    isAuthenticated,\n    loading,\n    error\n  } = useSelector(state => state.auth);\n\n  // Set auth token in localStorage\n  const setAuthToken = useCallback((token, refreshToken) => {\n    if (token) {\n      safeLocalStorage.setItem('token', token);\n      if (refreshToken) {\n        safeLocalStorage.setItem('refreshToken', refreshToken);\n      }\n    } else {\n      safeLocalStorage.removeItem('token');\n      safeLocalStorage.removeItem('refreshToken');\n    }\n  }, []);\n\n  // Load User\n  const loadUser = useCallback(async () => {\n    try {\n      const {\n        success,\n        data,\n        error\n      } = await api.get(API_CONFIG.AUTH.ME);\n      if (success && data) {\n        dispatch(setCredentials({\n          user: data,\n          token: safeLocalStorage.getItem('token')\n        }));\n        return {\n          success: true,\n          user: data\n        };\n      } else {\n        throw new Error(error || 'Failed to load user data');\n      }\n    } catch (error) {\n      console.error('Error loading user:', error);\n      return {\n        success: false,\n        error: error.message || 'Failed to load user data'\n      };\n    }\n  }, [dispatch]);\n\n  // Initialize auth state from localStorage on mount\n  useEffect(() => {\n    const initializeAuth = async () => {\n      const storedToken = safeLocalStorage.getItem('token');\n      if (storedToken) {\n        try {\n          // Load user data with the stored token\n          const result = await loadUser();\n          if (!result.success) {\n            // If loading user fails, clear the token\n            setAuthToken(null);\n          }\n        } catch (error) {\n          console.error('Failed to initialize auth:', error);\n          setAuthToken(null);\n        }\n      }\n    };\n    initializeAuth();\n  }, [dispatch, setAuthToken, loadUser]);\n\n  // Register User\n  const register = useCallback(async formData => {\n    try {\n      dispatch(loginStart());\n\n      // First, send OTP for registration\n      const otpResponse = await api.post(API_CONFIG.OTP.SEND_REGISTRATION_OTP, {\n        email: formData.email\n      });\n      if (!otpResponse.success) {\n        throw new Error(otpResponse.error || 'Failed to send OTP');\n      }\n\n      // If OTP is sent successfully, return success to proceed to OTP verification\n      return {\n        success: true,\n        message: 'OTP sent to your email',\n        email: formData.email\n      };\n    } catch (error) {\n      console.error('Registration error:', error);\n      const errorMsg = error.message || 'Registration failed';\n      dispatch(loginFailure(errorMsg));\n      return {\n        success: false,\n        error: errorMsg\n      };\n    }\n  }, [dispatch]);\n\n  // Verify OTP and complete registration\n  const verifyRegistrationOTP = useCallback(async (email, otp, userData) => {\n    try {\n      var _response$data, _response$data2;\n      dispatch(loginStart());\n\n      // Send OTP and user data for verification and registration\n      const response = await api.post(API_CONFIG.OTP.VERIFY_REGISTRATION_OTP, {\n        ...userData,\n        otp\n      });\n\n      // Accept both { token, user } and { data: { token, user } }\n      const payload = response !== null && response !== void 0 && (_response$data = response.data) !== null && _response$data !== void 0 && _response$data.token ? response.data : response !== null && response !== void 0 && (_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.data ? response.data.data : null;\n      if (response.success && payload !== null && payload !== void 0 && payload.token) {\n        // Set tokens and update auth state\n        const {\n          token,\n          refreshToken,\n          user\n        } = payload;\n        setAuthToken(token, refreshToken);\n        dispatch(loginSuccess({\n          user,\n          token\n        }));\n        return {\n          success: true,\n          user,\n          message: 'Registration successful! Redirecting...'\n        };\n      } else {\n        throw new Error(response.error || 'Registration failed');\n      }\n    } catch (error) {\n      console.error('OTP verification error:', error);\n      return {\n        success: false,\n        error: error.message || 'Failed to verify OTP'\n      };\n    }\n  }, [dispatch, setAuthToken]);\n\n  // Login User\n  const login = useCallback(async formData => {\n    try {\n      var _response$data3, _response$data4;\n      dispatch(loginStart());\n      const {\n        email,\n        password\n      } = formData;\n\n      // Call login API\n      const response = await api.post(API_CONFIG.AUTH.LOGIN, {\n        email,\n        password\n      });\n\n      // Accept both { token, user } and { data: { token, user } }\n      const payload = response !== null && response !== void 0 && (_response$data3 = response.data) !== null && _response$data3 !== void 0 && _response$data3.token ? response.data : response !== null && response !== void 0 && (_response$data4 = response.data) !== null && _response$data4 !== void 0 && _response$data4.data ? response.data.data : null;\n      if (response.success && payload !== null && payload !== void 0 && payload.token) {\n        // Set tokens and update auth state\n        const {\n          token,\n          refreshToken,\n          user\n        } = payload;\n        setAuthToken(token, refreshToken);\n        dispatch(loginSuccess({\n          user,\n          token\n        }));\n        return {\n          success: true,\n          user,\n          message: 'Login successful! Redirecting...'\n        };\n      } else {\n        var _response$data5;\n        // Bubble up any backend-provided error message\n        const backendError = (response === null || response === void 0 ? void 0 : response.error) || (response === null || response === void 0 ? void 0 : (_response$data5 = response.data) === null || _response$data5 === void 0 ? void 0 : _response$data5.message);\n        throw new Error(backendError || 'Login failed');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      const errorMsg = error.message || 'Login failed. Please check your credentials.';\n      dispatch(loginFailure(errorMsg));\n      return {\n        success: false,\n        error: errorMsg\n      };\n    }\n  }, [dispatch, setAuthToken]);\n\n  // Logout User\n  const logout = useCallback(() => {\n    // Clear tokens and reset auth state\n    setAuthToken(null);\n    dispatch(logoutAction());\n\n    // Redirect to login page\n    navigate('/login', {\n      replace: true\n    });\n  }, [dispatch, navigate, setAuthToken]);\n\n  // Clear Errors\n  const clearErrors = useCallback(() => {\n    dispatch(clearErrorAction());\n  }, [dispatch]);\n\n  // Update User Profile\n  const updateUser = useCallback(newUserData => {\n    dispatch(setCredentials({\n      user: {\n        ...user,\n        ...newUserData\n      },\n      token\n    }));\n  }, [dispatch, user, token]);\n\n  // Forgot Password - Request password reset\n  const forgotPassword = useCallback(async email => {\n    try {\n      const response = await api.post(API_CONFIG.OTP.SEND_FORGOT_PASSWORD_OTP, {\n        email\n      });\n      if (response.success) {\n        return {\n          success: true,\n          message: 'If an account exists with this email, a password reset OTP has been sent.'\n        };\n      } else {\n        throw new Error(response.error || 'Failed to process request');\n      }\n    } catch (error) {\n      console.error('Forgot password error:', error);\n      return {\n        success: false,\n        error: error.message || 'Failed to process password reset request'\n      };\n    }\n  }, []);\n\n  // Verify OTP and Reset Password\n  const resetPassword = useCallback(async (email, otp, newPassword) => {\n    try {\n      const response = await api.post(API_CONFIG.OTP.VERIFY_FORGOT_PASSWORD_OTP, {\n        email,\n        otp,\n        newPassword\n      });\n      if (response.success) {\n        return {\n          success: true,\n          message: 'Password has been reset successfully. You can now log in with your new password.'\n        };\n      } else {\n        throw new Error(response.error || 'Failed to reset password');\n      }\n    } catch (error) {\n      console.error('Reset password error:', error);\n      return {\n        success: false,\n        error: error.message || 'Failed to reset password. The OTP may have expired.'\n      };\n    }\n  }, []);\n\n  // Resend OTP (registration or forgot-password)\n  const resendOTP = useCallback(async (email, type = 'registration') => {\n    try {\n      const response = await api.post(API_CONFIG.OTP.RESEND_OTP, {\n        email,\n        type\n      });\n      if (response.success) {\n        return {\n          success: true,\n          message: 'A new OTP has been sent to your email.'\n        };\n      } else {\n        throw new Error(response.error || 'Failed to resend OTP');\n      }\n    } catch (error) {\n      console.error('Resend OTP error:', error);\n      return {\n        success: false,\n        error: error.message || 'Failed to resend OTP. Please try again.'\n      };\n    }\n  }, []);\n\n  // Context value\n  const value = {\n    user,\n    token,\n    isAuthenticated,\n    loading,\n    error,\n    // Auth methods\n    loadUser,\n    login,\n    register,\n    verifyRegistrationOTP,\n    logout,\n    clearErrors,\n    updateUser,\n    forgotPassword,\n    resetPassword,\n    resendOTP,\n    setAuthToken\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 303,\n    columnNumber: 10\n  }, this);\n};\n_s(AuthProvider, \"zr4VIc3jSyQGlenQZvBtWwjsK+Y=\", false, function () {\n  return [useDispatch, useNavigate, useSelector];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","_s2","createContext","useContext","useEffect","useCallback","useDispatch","useSelector","useNavigate","loginStart","loginSuccess","loginFailure","logout","logoutAction","clearError","clearErrorAction","setCredentials","api","API_CONFIG","safeLocalStorage","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","dispatch","navigate","user","token","isAuthenticated","loading","error","state","auth","setAuthToken","refreshToken","setItem","removeItem","loadUser","success","data","get","AUTH","ME","getItem","Error","console","message","initializeAuth","storedToken","result","register","formData","otpResponse","post","OTP","SEND_REGISTRATION_OTP","email","errorMsg","verifyRegistrationOTP","otp","userData","_response$data","_response$data2","response","VERIFY_REGISTRATION_OTP","payload","login","_response$data3","_response$data4","password","LOGIN","_response$data5","backendError","replace","clearErrors","updateUser","newUserData","forgotPassword","SEND_FORGOT_PASSWORD_OTP","resetPassword","newPassword","VERIFY_FORGOT_PASSWORD_OTP","resendOTP","type","RESEND_OTP","value","Provider","fileName","lineNumber","columnNumber","_c","useAuth","context","undefined","$RefreshReg$"],"sources":["C:/Users/arvin/OneDrive/Desktop/project2/alumni-verse/frontend/src/context/AuthContext.js"],"sourcesContent":["\"use client\"\n\nimport { createContext, useContext, useEffect, useCallback } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useNavigate } from \"react-router-dom\"\nimport {\n  loginStart,\n  loginSuccess,\n  loginFailure,\n  logout as logoutAction,\n  clearError as clearErrorAction,\n  setCredentials\n} from \"../features/auth/authSlice\"\nimport api from \"../utils/api\"\nimport { API_CONFIG } from \"../config/config\"\nimport { safeLocalStorage } from \"../utils/safeLocalStorage\"\n\n// Create the auth context\nconst AuthContext = createContext()\n\nexport const AuthProvider = ({ children }) => {\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n  const { user, token, isAuthenticated, loading, error } = useSelector((state) => state.auth)\n  \n  // Set auth token in localStorage\n  const setAuthToken = useCallback((token, refreshToken) => {\n    if (token) {\n      safeLocalStorage.setItem('token', token)\n      if (refreshToken) {\n        safeLocalStorage.setItem('refreshToken', refreshToken)\n      }\n    } else {\n      safeLocalStorage.removeItem('token')\n      safeLocalStorage.removeItem('refreshToken')\n    }\n  }, [])\n\n  // Load User\n  const loadUser = useCallback(async () => {\n    try {\n      const { success, data, error } = await api.get(API_CONFIG.AUTH.ME)\n      \n      if (success && data) {\n        dispatch(setCredentials({ user: data, token: safeLocalStorage.getItem('token') }))\n        return { success: true, user: data }\n      } else {\n        throw new Error(error || 'Failed to load user data')\n      }\n    } catch (error) {\n      console.error('Error loading user:', error)\n      return { \n        success: false, \n        error: error.message || 'Failed to load user data' \n      }\n    }\n  }, [dispatch])\n\n  // Initialize auth state from localStorage on mount\n  useEffect(() => {\n    const initializeAuth = async () => {\n      const storedToken = safeLocalStorage.getItem('token')\n      if (storedToken) {\n        try {\n          // Load user data with the stored token\n          const result = await loadUser()\n          if (!result.success) {\n            // If loading user fails, clear the token\n            setAuthToken(null)\n          }\n        } catch (error) {\n          console.error('Failed to initialize auth:', error)\n          setAuthToken(null)\n        }\n      }\n    }\n    \n    initializeAuth()\n  }, [dispatch, setAuthToken, loadUser])\n\n  // Register User\n  const register = useCallback(async (formData) => {\n    try {\n      dispatch(loginStart())\n      \n      // First, send OTP for registration\n      const otpResponse = await api.post(API_CONFIG.OTP.SEND_REGISTRATION_OTP, { \n        email: formData.email \n      })\n      \n      if (!otpResponse.success) {\n        throw new Error(otpResponse.error || 'Failed to send OTP')\n      }\n      \n      // If OTP is sent successfully, return success to proceed to OTP verification\n      return { \n        success: true, \n        message: 'OTP sent to your email',\n        email: formData.email\n      }\n      \n    } catch (error) {\n      console.error('Registration error:', error)\n      const errorMsg = error.message || 'Registration failed'\n      dispatch(loginFailure(errorMsg))\n      return { \n        success: false, \n        error: errorMsg \n      }\n    }\n  }, [dispatch])\n  \n  // Verify OTP and complete registration\n  const verifyRegistrationOTP = useCallback(async (email, otp, userData) => {\n    try {\n      dispatch(loginStart())\n      \n      // Send OTP and user data for verification and registration\n      const response = await api.post(API_CONFIG.OTP.VERIFY_REGISTRATION_OTP, {\n        ...userData,\n        otp\n      })\n      \n      // Accept both { token, user } and { data: { token, user } }\n      const payload = response?.data?.token ? response.data : response?.data?.data ? response.data.data : null;\n      \n      if (response.success && payload?.token) {\n        // Set tokens and update auth state\n        const { token, refreshToken, user } = payload\n        setAuthToken(token, refreshToken)\n        dispatch(loginSuccess({ user, token }))\n        \n        return { \n          success: true, \n          user,\n          message: 'Registration successful! Redirecting...' \n        }\n      } else {\n        throw new Error(response.error || 'Registration failed')\n      }\n      \n    } catch (error) {\n      console.error('OTP verification error:', error)\n      return { \n        success: false, \n        error: error.message || 'Failed to verify OTP' \n      }\n    }\n  }, [dispatch, setAuthToken])\n\n  // Login User\n  const login = useCallback(async (formData) => {\n    try {\n      dispatch(loginStart())\n      \n      const { email, password } = formData\n      \n      // Call login API\n      const response = await api.post(API_CONFIG.AUTH.LOGIN, { email, password })\n      \n      // Accept both { token, user } and { data: { token, user } }\n      const payload = response?.data?.token ? response.data : response?.data?.data ? response.data.data : null;\n\n      if (response.success && payload?.token) {\n        // Set tokens and update auth state\n        const { token, refreshToken, user } = payload\n        setAuthToken(token, refreshToken)\n        dispatch(loginSuccess({ user, token }))\n        \n        return { \n          success: true, \n          user,\n          message: 'Login successful! Redirecting...' \n        }\n      } else {\n        // Bubble up any backend-provided error message\n        const backendError = response?.error || response?.data?.message\n        throw new Error(backendError || 'Login failed')\n      }\n      \n    } catch (error) {\n      console.error('Login error:', error)\n      const errorMsg = error.message || 'Login failed. Please check your credentials.'\n      dispatch(loginFailure(errorMsg))\n      \n      return { \n        success: false, \n        error: errorMsg \n      }\n    }\n  }, [dispatch, setAuthToken])\n\n  // Logout User\n  const logout = useCallback(() => {\n    // Clear tokens and reset auth state\n    setAuthToken(null)\n    dispatch(logoutAction())\n    \n    // Redirect to login page\n    navigate('/login', { replace: true })\n  }, [dispatch, navigate, setAuthToken])\n\n  // Clear Errors\n  const clearErrors = useCallback(() => {\n    dispatch(clearErrorAction())\n  }, [dispatch])\n\n  // Update User Profile\n  const updateUser = useCallback((newUserData) => {\n    dispatch(setCredentials({ user: { ...user, ...newUserData }, token }))\n  }, [dispatch, user, token])\n\n  // Forgot Password - Request password reset\n  const forgotPassword = useCallback(async (email) => {\n    try {\n      const response = await api.post(API_CONFIG.OTP.SEND_FORGOT_PASSWORD_OTP, { email })\n      \n      if (response.success) {\n        return { \n          success: true, \n          message: 'If an account exists with this email, a password reset OTP has been sent.' \n        }\n      } else {\n        throw new Error(response.error || 'Failed to process request')\n      }\n    } catch (error) {\n      console.error('Forgot password error:', error)\n      return { \n        success: false, \n        error: error.message || 'Failed to process password reset request' \n      }\n    }\n  }, [])\n  \n  // Verify OTP and Reset Password\n  const resetPassword = useCallback(async (email, otp, newPassword) => {\n    try {\n      const response = await api.post(API_CONFIG.OTP.VERIFY_FORGOT_PASSWORD_OTP, { \n        email, \n        otp, \n        newPassword \n      })\n      \n      if (response.success) {\n        return { \n          success: true, \n          message: 'Password has been reset successfully. You can now log in with your new password.' \n        }\n      } else {\n        throw new Error(response.error || 'Failed to reset password')\n      }\n    } catch (error) {\n      console.error('Reset password error:', error)\n      return { \n        success: false, \n        error: error.message || 'Failed to reset password. The OTP may have expired.'\n      }\n    }\n  }, [])\n\n  // Resend OTP (registration or forgot-password)\n  const resendOTP = useCallback(async (email, type = 'registration') => {\n    try {\n      const response = await api.post(API_CONFIG.OTP.RESEND_OTP, { email, type })\n      if (response.success) {\n        return {\n          success: true,\n          message: 'A new OTP has been sent to your email.'\n        }\n      } else {\n        throw new Error(response.error || 'Failed to resend OTP')\n      }\n    } catch (error) {\n      console.error('Resend OTP error:', error)\n      return {\n        success: false,\n        error: error.message || 'Failed to resend OTP. Please try again.'\n      }\n    }\n  }, [])\n\n  // Context value\n  const value = {\n    user,\n    token,\n    isAuthenticated,\n    loading,\n    error,\n    // Auth methods\n    loadUser,\n    login,\n    register,\n    verifyRegistrationOTP,\n    logout,\n    clearErrors,\n    updateUser,\n    forgotPassword,\n    resetPassword,\n    resendOTP,\n    setAuthToken,\n  }\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>\n}\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext)\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider')\n  }\n  return context\n}\n\nexport default AuthContext\n"],"mappings":"AAAA,YAAY;;AAAA,IAAAA,YAAA;EAAAC,EAAA,GAAAC,YAAA;EAAAC,GAAA,GAAAD,YAAA;AAEZ,SAASE,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACzE,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SACEC,UAAU,EACVC,YAAY,EACZC,YAAY,EACZC,MAAM,IAAIC,YAAY,EACtBC,UAAU,IAAIC,gBAAgB,EAC9BC,cAAc,QACT,4BAA4B;AACnC,OAAOC,GAAG,MAAM,cAAc;AAC9B,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,gBAAgB,QAAQ,2BAA2B;;AAE5D;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGpB,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMqB,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAzB,EAAA;EAC5C,MAAM0B,QAAQ,GAAGnB,WAAW,CAAC,CAAC;EAC9B,MAAMoB,QAAQ,GAAGlB,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEmB,IAAI;IAAEC,KAAK;IAAEC,eAAe;IAAEC,OAAO;IAAEC;EAAM,CAAC,GAAGxB,WAAW,CAAEyB,KAAK,IAAKA,KAAK,CAACC,IAAI,CAAC;;EAE3F;EACA,MAAMC,YAAY,GAAG7B,WAAW,CAAC,CAACuB,KAAK,EAAEO,YAAY,KAAK;IACxD,IAAIP,KAAK,EAAE;MACTT,gBAAgB,CAACiB,OAAO,CAAC,OAAO,EAAER,KAAK,CAAC;MACxC,IAAIO,YAAY,EAAE;QAChBhB,gBAAgB,CAACiB,OAAO,CAAC,cAAc,EAAED,YAAY,CAAC;MACxD;IACF,CAAC,MAAM;MACLhB,gBAAgB,CAACkB,UAAU,CAAC,OAAO,CAAC;MACpClB,gBAAgB,CAACkB,UAAU,CAAC,cAAc,CAAC;IAC7C;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,QAAQ,GAAGjC,WAAW,CAAC,YAAY;IACvC,IAAI;MACF,MAAM;QAAEkC,OAAO;QAAEC,IAAI;QAAET;MAAM,CAAC,GAAG,MAAMd,GAAG,CAACwB,GAAG,CAACvB,UAAU,CAACwB,IAAI,CAACC,EAAE,CAAC;MAElE,IAAIJ,OAAO,IAAIC,IAAI,EAAE;QACnBf,QAAQ,CAACT,cAAc,CAAC;UAAEW,IAAI,EAAEa,IAAI;UAAEZ,KAAK,EAAET,gBAAgB,CAACyB,OAAO,CAAC,OAAO;QAAE,CAAC,CAAC,CAAC;QAClF,OAAO;UAAEL,OAAO,EAAE,IAAI;UAAEZ,IAAI,EAAEa;QAAK,CAAC;MACtC,CAAC,MAAM;QACL,MAAM,IAAIK,KAAK,CAACd,KAAK,IAAI,0BAA0B,CAAC;MACtD;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACde,OAAO,CAACf,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,OAAO;QACLQ,OAAO,EAAE,KAAK;QACdR,KAAK,EAAEA,KAAK,CAACgB,OAAO,IAAI;MAC1B,CAAC;IACH;EACF,CAAC,EAAE,CAACtB,QAAQ,CAAC,CAAC;;EAEd;EACArB,SAAS,CAAC,MAAM;IACd,MAAM4C,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,MAAMC,WAAW,GAAG9B,gBAAgB,CAACyB,OAAO,CAAC,OAAO,CAAC;MACrD,IAAIK,WAAW,EAAE;QACf,IAAI;UACF;UACA,MAAMC,MAAM,GAAG,MAAMZ,QAAQ,CAAC,CAAC;UAC/B,IAAI,CAACY,MAAM,CAACX,OAAO,EAAE;YACnB;YACAL,YAAY,CAAC,IAAI,CAAC;UACpB;QACF,CAAC,CAAC,OAAOH,KAAK,EAAE;UACde,OAAO,CAACf,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;UAClDG,YAAY,CAAC,IAAI,CAAC;QACpB;MACF;IACF,CAAC;IAEDc,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACvB,QAAQ,EAAES,YAAY,EAAEI,QAAQ,CAAC,CAAC;;EAEtC;EACA,MAAMa,QAAQ,GAAG9C,WAAW,CAAC,MAAO+C,QAAQ,IAAK;IAC/C,IAAI;MACF3B,QAAQ,CAAChB,UAAU,CAAC,CAAC,CAAC;;MAEtB;MACA,MAAM4C,WAAW,GAAG,MAAMpC,GAAG,CAACqC,IAAI,CAACpC,UAAU,CAACqC,GAAG,CAACC,qBAAqB,EAAE;QACvEC,KAAK,EAAEL,QAAQ,CAACK;MAClB,CAAC,CAAC;MAEF,IAAI,CAACJ,WAAW,CAACd,OAAO,EAAE;QACxB,MAAM,IAAIM,KAAK,CAACQ,WAAW,CAACtB,KAAK,IAAI,oBAAoB,CAAC;MAC5D;;MAEA;MACA,OAAO;QACLQ,OAAO,EAAE,IAAI;QACbQ,OAAO,EAAE,wBAAwB;QACjCU,KAAK,EAAEL,QAAQ,CAACK;MAClB,CAAC;IAEH,CAAC,CAAC,OAAO1B,KAAK,EAAE;MACde,OAAO,CAACf,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAM2B,QAAQ,GAAG3B,KAAK,CAACgB,OAAO,IAAI,qBAAqB;MACvDtB,QAAQ,CAACd,YAAY,CAAC+C,QAAQ,CAAC,CAAC;MAChC,OAAO;QACLnB,OAAO,EAAE,KAAK;QACdR,KAAK,EAAE2B;MACT,CAAC;IACH;EACF,CAAC,EAAE,CAACjC,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAMkC,qBAAqB,GAAGtD,WAAW,CAAC,OAAOoD,KAAK,EAAEG,GAAG,EAAEC,QAAQ,KAAK;IACxE,IAAI;MAAA,IAAAC,cAAA,EAAAC,eAAA;MACFtC,QAAQ,CAAChB,UAAU,CAAC,CAAC,CAAC;;MAEtB;MACA,MAAMuD,QAAQ,GAAG,MAAM/C,GAAG,CAACqC,IAAI,CAACpC,UAAU,CAACqC,GAAG,CAACU,uBAAuB,EAAE;QACtE,GAAGJ,QAAQ;QACXD;MACF,CAAC,CAAC;;MAEF;MACA,MAAMM,OAAO,GAAGF,QAAQ,aAARA,QAAQ,gBAAAF,cAAA,GAARE,QAAQ,CAAExB,IAAI,cAAAsB,cAAA,eAAdA,cAAA,CAAgBlC,KAAK,GAAGoC,QAAQ,CAACxB,IAAI,GAAGwB,QAAQ,aAARA,QAAQ,gBAAAD,eAAA,GAARC,QAAQ,CAAExB,IAAI,cAAAuB,eAAA,eAAdA,eAAA,CAAgBvB,IAAI,GAAGwB,QAAQ,CAACxB,IAAI,CAACA,IAAI,GAAG,IAAI;MAExG,IAAIwB,QAAQ,CAACzB,OAAO,IAAI2B,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEtC,KAAK,EAAE;QACtC;QACA,MAAM;UAAEA,KAAK;UAAEO,YAAY;UAAER;QAAK,CAAC,GAAGuC,OAAO;QAC7ChC,YAAY,CAACN,KAAK,EAAEO,YAAY,CAAC;QACjCV,QAAQ,CAACf,YAAY,CAAC;UAAEiB,IAAI;UAAEC;QAAM,CAAC,CAAC,CAAC;QAEvC,OAAO;UACLW,OAAO,EAAE,IAAI;UACbZ,IAAI;UACJoB,OAAO,EAAE;QACX,CAAC;MACH,CAAC,MAAM;QACL,MAAM,IAAIF,KAAK,CAACmB,QAAQ,CAACjC,KAAK,IAAI,qBAAqB,CAAC;MAC1D;IAEF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACde,OAAO,CAACf,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,OAAO;QACLQ,OAAO,EAAE,KAAK;QACdR,KAAK,EAAEA,KAAK,CAACgB,OAAO,IAAI;MAC1B,CAAC;IACH;EACF,CAAC,EAAE,CAACtB,QAAQ,EAAES,YAAY,CAAC,CAAC;;EAE5B;EACA,MAAMiC,KAAK,GAAG9D,WAAW,CAAC,MAAO+C,QAAQ,IAAK;IAC5C,IAAI;MAAA,IAAAgB,eAAA,EAAAC,eAAA;MACF5C,QAAQ,CAAChB,UAAU,CAAC,CAAC,CAAC;MAEtB,MAAM;QAAEgD,KAAK;QAAEa;MAAS,CAAC,GAAGlB,QAAQ;;MAEpC;MACA,MAAMY,QAAQ,GAAG,MAAM/C,GAAG,CAACqC,IAAI,CAACpC,UAAU,CAACwB,IAAI,CAAC6B,KAAK,EAAE;QAAEd,KAAK;QAAEa;MAAS,CAAC,CAAC;;MAE3E;MACA,MAAMJ,OAAO,GAAGF,QAAQ,aAARA,QAAQ,gBAAAI,eAAA,GAARJ,QAAQ,CAAExB,IAAI,cAAA4B,eAAA,eAAdA,eAAA,CAAgBxC,KAAK,GAAGoC,QAAQ,CAACxB,IAAI,GAAGwB,QAAQ,aAARA,QAAQ,gBAAAK,eAAA,GAARL,QAAQ,CAAExB,IAAI,cAAA6B,eAAA,eAAdA,eAAA,CAAgB7B,IAAI,GAAGwB,QAAQ,CAACxB,IAAI,CAACA,IAAI,GAAG,IAAI;MAExG,IAAIwB,QAAQ,CAACzB,OAAO,IAAI2B,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEtC,KAAK,EAAE;QACtC;QACA,MAAM;UAAEA,KAAK;UAAEO,YAAY;UAAER;QAAK,CAAC,GAAGuC,OAAO;QAC7ChC,YAAY,CAACN,KAAK,EAAEO,YAAY,CAAC;QACjCV,QAAQ,CAACf,YAAY,CAAC;UAAEiB,IAAI;UAAEC;QAAM,CAAC,CAAC,CAAC;QAEvC,OAAO;UACLW,OAAO,EAAE,IAAI;UACbZ,IAAI;UACJoB,OAAO,EAAE;QACX,CAAC;MACH,CAAC,MAAM;QAAA,IAAAyB,eAAA;QACL;QACA,MAAMC,YAAY,GAAG,CAAAT,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEjC,KAAK,MAAIiC,QAAQ,aAARA,QAAQ,wBAAAQ,eAAA,GAARR,QAAQ,CAAExB,IAAI,cAAAgC,eAAA,uBAAdA,eAAA,CAAgBzB,OAAO;QAC/D,MAAM,IAAIF,KAAK,CAAC4B,YAAY,IAAI,cAAc,CAAC;MACjD;IAEF,CAAC,CAAC,OAAO1C,KAAK,EAAE;MACde,OAAO,CAACf,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,MAAM2B,QAAQ,GAAG3B,KAAK,CAACgB,OAAO,IAAI,8CAA8C;MAChFtB,QAAQ,CAACd,YAAY,CAAC+C,QAAQ,CAAC,CAAC;MAEhC,OAAO;QACLnB,OAAO,EAAE,KAAK;QACdR,KAAK,EAAE2B;MACT,CAAC;IACH;EACF,CAAC,EAAE,CAACjC,QAAQ,EAAES,YAAY,CAAC,CAAC;;EAE5B;EACA,MAAMtB,MAAM,GAAGP,WAAW,CAAC,MAAM;IAC/B;IACA6B,YAAY,CAAC,IAAI,CAAC;IAClBT,QAAQ,CAACZ,YAAY,CAAC,CAAC,CAAC;;IAExB;IACAa,QAAQ,CAAC,QAAQ,EAAE;MAAEgD,OAAO,EAAE;IAAK,CAAC,CAAC;EACvC,CAAC,EAAE,CAACjD,QAAQ,EAAEC,QAAQ,EAAEQ,YAAY,CAAC,CAAC;;EAEtC;EACA,MAAMyC,WAAW,GAAGtE,WAAW,CAAC,MAAM;IACpCoB,QAAQ,CAACV,gBAAgB,CAAC,CAAC,CAAC;EAC9B,CAAC,EAAE,CAACU,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAMmD,UAAU,GAAGvE,WAAW,CAAEwE,WAAW,IAAK;IAC9CpD,QAAQ,CAACT,cAAc,CAAC;MAAEW,IAAI,EAAE;QAAE,GAAGA,IAAI;QAAE,GAAGkD;MAAY,CAAC;MAAEjD;IAAM,CAAC,CAAC,CAAC;EACxE,CAAC,EAAE,CAACH,QAAQ,EAAEE,IAAI,EAAEC,KAAK,CAAC,CAAC;;EAE3B;EACA,MAAMkD,cAAc,GAAGzE,WAAW,CAAC,MAAOoD,KAAK,IAAK;IAClD,IAAI;MACF,MAAMO,QAAQ,GAAG,MAAM/C,GAAG,CAACqC,IAAI,CAACpC,UAAU,CAACqC,GAAG,CAACwB,wBAAwB,EAAE;QAAEtB;MAAM,CAAC,CAAC;MAEnF,IAAIO,QAAQ,CAACzB,OAAO,EAAE;QACpB,OAAO;UACLA,OAAO,EAAE,IAAI;UACbQ,OAAO,EAAE;QACX,CAAC;MACH,CAAC,MAAM;QACL,MAAM,IAAIF,KAAK,CAACmB,QAAQ,CAACjC,KAAK,IAAI,2BAA2B,CAAC;MAChE;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACde,OAAO,CAACf,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,OAAO;QACLQ,OAAO,EAAE,KAAK;QACdR,KAAK,EAAEA,KAAK,CAACgB,OAAO,IAAI;MAC1B,CAAC;IACH;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMiC,aAAa,GAAG3E,WAAW,CAAC,OAAOoD,KAAK,EAAEG,GAAG,EAAEqB,WAAW,KAAK;IACnE,IAAI;MACF,MAAMjB,QAAQ,GAAG,MAAM/C,GAAG,CAACqC,IAAI,CAACpC,UAAU,CAACqC,GAAG,CAAC2B,0BAA0B,EAAE;QACzEzB,KAAK;QACLG,GAAG;QACHqB;MACF,CAAC,CAAC;MAEF,IAAIjB,QAAQ,CAACzB,OAAO,EAAE;QACpB,OAAO;UACLA,OAAO,EAAE,IAAI;UACbQ,OAAO,EAAE;QACX,CAAC;MACH,CAAC,MAAM;QACL,MAAM,IAAIF,KAAK,CAACmB,QAAQ,CAACjC,KAAK,IAAI,0BAA0B,CAAC;MAC/D;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACde,OAAO,CAACf,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,OAAO;QACLQ,OAAO,EAAE,KAAK;QACdR,KAAK,EAAEA,KAAK,CAACgB,OAAO,IAAI;MAC1B,CAAC;IACH;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMoC,SAAS,GAAG9E,WAAW,CAAC,OAAOoD,KAAK,EAAE2B,IAAI,GAAG,cAAc,KAAK;IACpE,IAAI;MACF,MAAMpB,QAAQ,GAAG,MAAM/C,GAAG,CAACqC,IAAI,CAACpC,UAAU,CAACqC,GAAG,CAAC8B,UAAU,EAAE;QAAE5B,KAAK;QAAE2B;MAAK,CAAC,CAAC;MAC3E,IAAIpB,QAAQ,CAACzB,OAAO,EAAE;QACpB,OAAO;UACLA,OAAO,EAAE,IAAI;UACbQ,OAAO,EAAE;QACX,CAAC;MACH,CAAC,MAAM;QACL,MAAM,IAAIF,KAAK,CAACmB,QAAQ,CAACjC,KAAK,IAAI,sBAAsB,CAAC;MAC3D;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACde,OAAO,CAACf,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MACzC,OAAO;QACLQ,OAAO,EAAE,KAAK;QACdR,KAAK,EAAEA,KAAK,CAACgB,OAAO,IAAI;MAC1B,CAAC;IACH;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMuC,KAAK,GAAG;IACZ3D,IAAI;IACJC,KAAK;IACLC,eAAe;IACfC,OAAO;IACPC,KAAK;IACL;IACAO,QAAQ;IACR6B,KAAK;IACLhB,QAAQ;IACRQ,qBAAqB;IACrB/C,MAAM;IACN+D,WAAW;IACXC,UAAU;IACVE,cAAc;IACdE,aAAa;IACbG,SAAS;IACTjD;EACF,CAAC;EAED,oBAAOb,OAAA,CAACC,WAAW,CAACiE,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAA9D,QAAA,EAAEA;EAAQ;IAAAgE,QAAA,EAAA1F,YAAA;IAAA2F,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAC9E,CAAC;AAAA3F,EAAA,CA3RYwB,YAAY;EAAA,QACNjB,WAAW,EACXE,WAAW,EAC6BD,WAAW;AAAA;AAAAoF,EAAA,GAHzDpE,YAAY;AA6RzB,OAAO,MAAMqE,OAAO,GAAGA,CAAA,KAAM;EAAA3F,GAAA;EAC3B,MAAM4F,OAAO,GAAG1F,UAAU,CAACmB,WAAW,CAAC;EACvC,IAAIuE,OAAO,KAAKC,SAAS,EAAE;IACzB,MAAM,IAAIjD,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOgD,OAAO;AAChB,CAAC;AAAA5F,GAAA,CANY2F,OAAO;AAQpB,eAAetE,WAAW;AAAA,IAAAqE,EAAA;AAAAI,YAAA,CAAAJ,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}