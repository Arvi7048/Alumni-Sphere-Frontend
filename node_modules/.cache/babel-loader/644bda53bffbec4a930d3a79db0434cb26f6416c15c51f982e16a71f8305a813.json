{"ast":null,"code":"import _objectSpread from\"C:/Users/arvin/OneDrive/Desktop/project2/alumni-verse/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import axios from'axios';import{API_CONFIG}from'../config/config';import{safeLocalStorage}from'./safeLocalStorage';// Create axios instance with base URL\nconst api=axios.create({baseURL:API_CONFIG.API_BASE_URL,headers:{'Content-Type':'application/json','Accept':'application/json'},timeout:30000,// 30 seconds timeout\nwithCredentials:true// Important for cookies if using them\n});// Request interceptor for API calls\napi.interceptors.request.use(async config=>{// Skip adding auth header for public endpoints\nconst publicEndpoints=[API_CONFIG.AUTH.LOGIN,API_CONFIG.AUTH.REGISTER,API_CONFIG.AUTH.FORGOT_PASSWORD,API_CONFIG.OTP.SEND_REGISTRATION_OTP,API_CONFIG.OTP.VERIFY_REGISTRATION_OTP,API_CONFIG.OTP.SEND_FORGOT_PASSWORD_OTP,API_CONFIG.OTP.VERIFY_FORGOT_PASSWORD_OTP,API_CONFIG.OTP.RESEND_OTP];const isPublicEndpoint=publicEndpoints.some(endpoint=>config.url.endsWith(endpoint));if(!isPublicEndpoint){const token=safeLocalStorage.getItem('token');if(token){config.headers['Authorization']=\"Bearer \".concat(token);}else{// If no token and not a public endpoint, redirect to login\nif(typeof window!=='undefined'&&window.location.pathname!=='/login'){window.location.href='/login';}return Promise.reject(new Error('No authentication token found'));}}return config;},error=>{return Promise.reject(error);});// Response interceptor for API calls\napi.interceptors.response.use(response=>{// Handle successful responses\nreturn response.data||{};},async error=>{var _error$response;const originalRequest=error.config;// Handle 401 Unauthorized errors (token expired or invalid)\nif(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401&&!originalRequest._retry){// If we've already tried to refresh the token, log the user out\nif(originalRequest._retry){// Clear auth data\nsafeLocalStorage.removeItem('token');safeLocalStorage.removeItem('refreshToken');// Redirect to login if not already there\nif(typeof window!=='undefined'&&window.location.pathname!=='/login'){window.location.href='/login';}return Promise.reject(error);}// Mark that we've tried to refresh the token\noriginalRequest._retry=true;try{// Try to refresh the token\nconst refreshToken=safeLocalStorage.getItem('refreshToken');if(refreshToken){// Use the refresh token to get a new access token\nconst response=await axios.post(\"\".concat(API_CONFIG.API_BASE_URL).concat(API_CONFIG.AUTH.REFRESH_TOKEN),{refreshToken},{headers:{'Content-Type':'application/json'},withCredentials:true});const{token:newToken,refreshToken:newRefreshToken}=response.data;if(newToken&&newRefreshToken){// Store the new tokens\nsafeLocalStorage.setItem('token',newToken);safeLocalStorage.setItem('refreshToken',newRefreshToken);// Update the Authorization header\noriginalRequest.headers['Authorization']=\"Bearer \".concat(newToken);// Retry the original request with the new token\nreturn api(originalRequest);}}}catch(refreshError){console.error('Error refreshing token:',refreshError);// If refresh fails, log the user out\nsafeLocalStorage.removeItem('token');safeLocalStorage.removeItem('refreshToken');// Only redirect if not already on the login page\nif(typeof window!=='undefined'&&window.location.pathname!=='/login'){window.location.href='/login';}return Promise.reject(refreshError);}}// Handle other error status codes\nif(error.response){// The request was made and the server responded with a status code\n// that falls out of the range of 2xx\nconst{status,data}=error.response;// Handle specific status codes\nswitch(status){case 400:return Promise.reject(new Error(data.message||'Bad request'));case 403:return Promise.reject(new Error('You do not have permission to perform this action'));case 404:return Promise.reject(new Error('The requested resource was not found'));case 500:return Promise.reject(new Error('An internal server error occurred'));default:return Promise.reject(new Error(data.message||'An error occurred'));}}else if(error.request){// The request was made but no response was received\nreturn Promise.reject(new Error('No response received from server. Please check your connection.'));}else{// Something happened in setting up the request that triggered an Error\nreturn Promise.reject(new Error(error.message||'An error occurred'));}});// Helper function to handle API errors\nconst handleApiError=error=>{console.error('API Error:',error);let errorMessage='An unexpected error occurred';if(error.response){// The request was made and the server responded with a status code\n// that falls out of the range of 2xx\nconst{status,data}=error.response;errorMessage=(data===null||data===void 0?void 0:data.message)||\"Request failed with status code \".concat(status);}else if(error.request){// The request was made but no response was received\nerrorMessage='No response received from server. Please check your connection.';}else{// Something happened in setting up the request that triggered an Error\nerrorMessage=error.message||'An error occurred while setting up the request';}return{success:false,error:errorMessage};};// Wrapper functions for common HTTP methods\nconst apiClient={get:async function(url){let config=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{const response=await api.get(url,config);return{success:true,data:response};}catch(error){return handleApiError(error);}},post:async function(url){let data=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};let config=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};try{let response;// Special handling for file uploads\nif(data instanceof FormData){response=await api.post(url,data,_objectSpread(_objectSpread({},config),{},{headers:_objectSpread(_objectSpread({},config.headers),{},{'Content-Type':'multipart/form-data'}),withCredentials:true}));}else{response=await api.post(url,data,_objectSpread(_objectSpread({},config),{},{headers:_objectSpread({'Content-Type':'application/json'},config.headers),withCredentials:true}));}return{success:true,data:response};}catch(error){return handleApiError(error);}},put:async function(url){let data=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};let config=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};try{// Special handling for FormData (file uploads)\nif(data instanceof FormData){const response=await api.put(url,data,_objectSpread(_objectSpread({},config),{},{headers:_objectSpread(_objectSpread({},config.headers),{},{'Content-Type':'multipart/form-data'}),withCredentials:true}));return{success:true,data:response};}// For regular JSON data\nconst response=await api.put(url,data,_objectSpread(_objectSpread({},config),{},{headers:_objectSpread({'Content-Type':'application/json'},config.headers),withCredentials:true}));return{success:true,data:response,status:response.status,statusText:response.statusText};}catch(error){var _error$response2,_error$response3;console.error('PUT request failed:',{url,error:((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.data)||error.message,status:(_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.status,config:error.config});return handleApiError(error);}},delete:async function(url){let config=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{const response=await api.delete(url,config);return{success:true,data:response};}catch(error){return handleApiError(error);}}// Add other HTTP methods as needed\n};export default apiClient;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}