{"ast":null,"code":"import axios from 'axios';\nimport { API_CONFIG } from '../config/config';\nimport { safeLocalStorage } from './safeLocalStorage';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_CONFIG.API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  timeout: 30000,\n  // 30 seconds timeout\n  withCredentials: true // Important for cookies if using them\n});\n\n// Request interceptor for API calls\napi.interceptors.request.use(async config => {\n  // Skip adding auth header for public endpoints\n  const publicEndpoints = [API_CONFIG.AUTH.LOGIN, API_CONFIG.AUTH.REGISTER, API_CONFIG.AUTH.FORGOT_PASSWORD, API_CONFIG.OTP.SEND_REGISTRATION_OTP, API_CONFIG.OTP.VERIFY_REGISTRATION_OTP, API_CONFIG.OTP.SEND_FORGOT_PASSWORD_OTP, API_CONFIG.OTP.VERIFY_FORGOT_PASSWORD_OTP, API_CONFIG.OTP.RESEND_OTP];\n  const isPublicEndpoint = publicEndpoints.some(endpoint => config.url.endsWith(endpoint));\n  if (!isPublicEndpoint) {\n    const token = safeLocalStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    } else {\n      // If no token and not a public endpoint, redirect to login\n      if (typeof window !== 'undefined' && window.location.pathname !== '/login') {\n        window.location.href = '/login';\n      }\n      return Promise.reject(new Error('No authentication token found'));\n    }\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor for API calls\napi.interceptors.response.use(response => {\n  // Handle successful responses\n  return response.data || {};\n}, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n\n  // Handle 401 Unauthorized errors (token expired or invalid)\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    // If we've already tried to refresh the token, log the user out\n    if (originalRequest._retry) {\n      // Clear auth data\n      safeLocalStorage.removeItem('token');\n      safeLocalStorage.removeItem('refreshToken');\n\n      // Redirect to login if not already there\n      if (typeof window !== 'undefined' && window.location.pathname !== '/login') {\n        window.location.href = '/login';\n      }\n      return Promise.reject(error);\n    }\n\n    // Mark that we've tried to refresh the token\n    originalRequest._retry = true;\n    try {\n      // Try to refresh the token\n      const refreshToken = safeLocalStorage.getItem('refreshToken');\n      if (refreshToken) {\n        // Use the refresh token to get a new access token\n        const response = await axios.post(`${API_CONFIG.API_BASE_URL}${API_CONFIG.AUTH.REFRESH_TOKEN}`, {\n          refreshToken\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          withCredentials: true\n        });\n        const {\n          token: newToken,\n          refreshToken: newRefreshToken\n        } = response.data;\n        if (newToken && newRefreshToken) {\n          // Store the new tokens\n          safeLocalStorage.setItem('token', newToken);\n          safeLocalStorage.setItem('refreshToken', newRefreshToken);\n\n          // Update the Authorization header\n          originalRequest.headers['Authorization'] = `Bearer ${newToken}`;\n\n          // Retry the original request with the new token\n          return api(originalRequest);\n        }\n      }\n    } catch (refreshError) {\n      console.error('Error refreshing token:', refreshError);\n      // If refresh fails, log the user out\n      safeLocalStorage.removeItem('token');\n      safeLocalStorage.removeItem('refreshToken');\n\n      // Only redirect if not already on the login page\n      if (typeof window !== 'undefined' && window.location.pathname !== '/login') {\n        window.location.href = '/login';\n      }\n      return Promise.reject(refreshError);\n    }\n  }\n\n  // Handle other error status codes\n  if (error.response) {\n    // The request was made and the server responded with a status code\n    // that falls out of the range of 2xx\n    const {\n      status,\n      data\n    } = error.response;\n\n    // Handle specific status codes\n    switch (status) {\n      case 400:\n        return Promise.reject(new Error(data.message || 'Bad request'));\n      case 403:\n        return Promise.reject(new Error('You do not have permission to perform this action'));\n      case 404:\n        return Promise.reject(new Error('The requested resource was not found'));\n      case 500:\n        return Promise.reject(new Error('An internal server error occurred'));\n      default:\n        return Promise.reject(new Error(data.message || 'An error occurred'));\n    }\n  } else if (error.request) {\n    // The request was made but no response was received\n    return Promise.reject(new Error('No response received from server. Please check your connection.'));\n  } else {\n    // Something happened in setting up the request that triggered an Error\n    return Promise.reject(new Error(error.message || 'An error occurred'));\n  }\n});\n\n// Helper function to handle API errors\nconst handleApiError = error => {\n  console.error('API Error:', error);\n  let errorMessage = 'An unexpected error occurred';\n  if (error.response) {\n    // The request was made and the server responded with a status code\n    // that falls out of the range of 2xx\n    const {\n      status,\n      data\n    } = error.response;\n    errorMessage = (data === null || data === void 0 ? void 0 : data.message) || `Request failed with status code ${status}`;\n  } else if (error.request) {\n    // The request was made but no response was received\n    errorMessage = 'No response received from server. Please check your connection.';\n  } else {\n    // Something happened in setting up the request that triggered an Error\n    errorMessage = error.message || 'An error occurred while setting up the request';\n  }\n  return {\n    success: false,\n    error: errorMessage\n  };\n};\n\n// Wrapper functions for common HTTP methods\nconst apiClient = {\n  get: async (url, config = {}) => {\n    try {\n      const response = await api.get(url, config);\n      return {\n        success: true,\n        data: response\n      };\n    } catch (error) {\n      return handleApiError(error);\n    }\n  },\n  post: async (url, data = {}, config = {}) => {\n    try {\n      let response;\n      // Special handling for file uploads\n      if (data instanceof FormData) {\n        response = await api.post(url, data, {\n          ...config,\n          headers: {\n            ...config.headers,\n            'Content-Type': 'multipart/form-data'\n          },\n          withCredentials: true\n        });\n      } else {\n        response = await api.post(url, data, {\n          ...config,\n          headers: {\n            'Content-Type': 'application/json',\n            ...config.headers\n          },\n          withCredentials: true\n        });\n      }\n      return {\n        success: true,\n        data: response\n      };\n    } catch (error) {\n      return handleApiError(error);\n    }\n  },\n  put: async (url, data = {}, config = {}) => {\n    try {\n      // Special handling for FormData (file uploads)\n      if (data instanceof FormData) {\n        const response = await api.put(url, data, {\n          ...config,\n          headers: {\n            ...config.headers,\n            'Content-Type': 'multipart/form-data'\n          },\n          withCredentials: true\n        });\n        return {\n          success: true,\n          data: response\n        };\n      }\n\n      // For regular JSON data\n      const response = await api.put(url, data, {\n        ...config,\n        headers: {\n          'Content-Type': 'application/json',\n          ...config.headers\n        },\n        withCredentials: true\n      });\n      return {\n        success: true,\n        data: response,\n        status: response.status,\n        statusText: response.statusText\n      };\n    } catch (error) {\n      var _error$response2, _error$response3;\n      console.error('PUT request failed:', {\n        url,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message,\n        status: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status,\n        config: error.config\n      });\n      return handleApiError(error);\n    }\n  },\n  delete: async (url, config = {}) => {\n    try {\n      const response = await api.delete(url, config);\n      return {\n        success: true,\n        data: response\n      };\n    } catch (error) {\n      return handleApiError(error);\n    }\n  }\n\n  // Add other HTTP methods as needed\n};\nexport default apiClient;","map":{"version":3,"names":["axios","API_CONFIG","safeLocalStorage","api","create","baseURL","API_BASE_URL","headers","timeout","withCredentials","interceptors","request","use","config","publicEndpoints","AUTH","LOGIN","REGISTER","FORGOT_PASSWORD","OTP","SEND_REGISTRATION_OTP","VERIFY_REGISTRATION_OTP","SEND_FORGOT_PASSWORD_OTP","VERIFY_FORGOT_PASSWORD_OTP","RESEND_OTP","isPublicEndpoint","some","endpoint","url","endsWith","token","getItem","window","location","pathname","href","Promise","reject","Error","error","response","data","_error$response","originalRequest","status","_retry","removeItem","refreshToken","post","REFRESH_TOKEN","newToken","newRefreshToken","setItem","refreshError","console","message","handleApiError","errorMessage","success","apiClient","get","FormData","put","statusText","_error$response2","_error$response3","delete"],"sources":["C:/Users/arvin/OneDrive/Desktop/project2/alumni-verse/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\nimport { API_CONFIG } from '../config/config';\nimport { safeLocalStorage } from './safeLocalStorage';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_CONFIG.API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  },\n  timeout: 30000, // 30 seconds timeout\n  withCredentials: true, // Important for cookies if using them\n});\n\n// Request interceptor for API calls\napi.interceptors.request.use(\n  async (config) => {\n    // Skip adding auth header for public endpoints\n    const publicEndpoints = [\n      API_CONFIG.AUTH.LOGIN,\n      API_CONFIG.AUTH.REGISTER,\n      API_CONFIG.AUTH.FORGOT_PASSWORD,\n      API_CONFIG.OTP.SEND_REGISTRATION_OTP,\n      API_CONFIG.OTP.VERIFY_REGISTRATION_OTP,\n      API_CONFIG.OTP.SEND_FORGOT_PASSWORD_OTP,\n      API_CONFIG.OTP.VERIFY_FORGOT_PASSWORD_OTP,\n      API_CONFIG.OTP.RESEND_OTP\n    ];\n\n    const isPublicEndpoint = publicEndpoints.some(endpoint => \n      config.url.endsWith(endpoint)\n    );\n\n    if (!isPublicEndpoint) {\n      const token = safeLocalStorage.getItem('token');\n      if (token) {\n        config.headers['Authorization'] = `Bearer ${token}`;\n      } else {\n        // If no token and not a public endpoint, redirect to login\n        if (typeof window !== 'undefined' && window.location.pathname !== '/login') {\n          window.location.href = '/login';\n        }\n        return Promise.reject(new Error('No authentication token found'));\n      }\n    }\n    \n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for API calls\napi.interceptors.response.use(\n  (response) => {\n    // Handle successful responses\n    return response.data || {};\n  },\n  async (error) => {\n    const originalRequest = error.config;\n    \n    // Handle 401 Unauthorized errors (token expired or invalid)\n    if (error.response?.status === 401 && !originalRequest._retry) {\n      // If we've already tried to refresh the token, log the user out\n      if (originalRequest._retry) {\n        // Clear auth data\n        safeLocalStorage.removeItem('token');\n        safeLocalStorage.removeItem('refreshToken');\n        \n        // Redirect to login if not already there\n        if (typeof window !== 'undefined' && window.location.pathname !== '/login') {\n          window.location.href = '/login';\n        }\n        return Promise.reject(error);\n      }\n      \n      // Mark that we've tried to refresh the token\n      originalRequest._retry = true;\n      \n      try {\n        // Try to refresh the token\n        const refreshToken = safeLocalStorage.getItem('refreshToken');\n        if (refreshToken) {\n          // Use the refresh token to get a new access token\n          const response = await axios.post(\n            `${API_CONFIG.API_BASE_URL}${API_CONFIG.AUTH.REFRESH_TOKEN}`,\n            { refreshToken },\n            {\n              headers: {\n                'Content-Type': 'application/json',\n              },\n              withCredentials: true,\n            }\n          );\n          \n          const { token: newToken, refreshToken: newRefreshToken } = response.data;\n          \n          if (newToken && newRefreshToken) {\n            // Store the new tokens\n            safeLocalStorage.setItem('token', newToken);\n            safeLocalStorage.setItem('refreshToken', newRefreshToken);\n            \n            // Update the Authorization header\n            originalRequest.headers['Authorization'] = `Bearer ${newToken}`;\n            \n            // Retry the original request with the new token\n            return api(originalRequest);\n          }\n        }\n      } catch (refreshError) {\n        console.error('Error refreshing token:', refreshError);\n        // If refresh fails, log the user out\n        safeLocalStorage.removeItem('token');\n        safeLocalStorage.removeItem('refreshToken');\n        \n        // Only redirect if not already on the login page\n        if (typeof window !== 'undefined' && window.location.pathname !== '/login') {\n          window.location.href = '/login';\n        }\n        \n        return Promise.reject(refreshError);\n      }\n    }\n    \n    // Handle other error status codes\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      const { status, data } = error.response;\n      \n      // Handle specific status codes\n      switch (status) {\n        case 400:\n          return Promise.reject(new Error(data.message || 'Bad request'));\n        case 403:\n          return Promise.reject(new Error('You do not have permission to perform this action'));\n        case 404:\n          return Promise.reject(new Error('The requested resource was not found'));\n        case 500:\n          return Promise.reject(new Error('An internal server error occurred'));\n        default:\n          return Promise.reject(new Error(data.message || 'An error occurred'));\n      }\n    } else if (error.request) {\n      // The request was made but no response was received\n      return Promise.reject(new Error('No response received from server. Please check your connection.'));\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      return Promise.reject(new Error(error.message || 'An error occurred'));\n    }\n  }\n);\n\n// Helper function to handle API errors\nconst handleApiError = (error) => {\n  console.error('API Error:', error);\n  let errorMessage = 'An unexpected error occurred';\n  \n  if (error.response) {\n    // The request was made and the server responded with a status code\n    // that falls out of the range of 2xx\n    const { status, data } = error.response;\n    errorMessage = data?.message || `Request failed with status code ${status}`;\n  } else if (error.request) {\n    // The request was made but no response was received\n    errorMessage = 'No response received from server. Please check your connection.';\n  } else {\n    // Something happened in setting up the request that triggered an Error\n    errorMessage = error.message || 'An error occurred while setting up the request';\n  }\n  \n  return { success: false, error: errorMessage };\n};\n\n// Wrapper functions for common HTTP methods\nconst apiClient = {\n  get: async (url, config = {}) => {\n    try {\n      const response = await api.get(url, config);\n      return { success: true, data: response };\n    } catch (error) {\n      return handleApiError(error);\n    }\n  },\n  \n  post: async (url, data = {}, config = {}) => {\n    try {\n      let response;\n      // Special handling for file uploads\n      if (data instanceof FormData) {\n        response = await api.post(url, data, {\n          ...config,\n          headers: {\n            ...config.headers,\n            'Content-Type': 'multipart/form-data',\n          },\n          withCredentials: true,\n        });\n      } else {\n        response = await api.post(url, data, {\n          ...config,\n          headers: {\n            'Content-Type': 'application/json',\n            ...config.headers,\n          },\n          withCredentials: true,\n        });\n      }\n      return { success: true, data: response };\n    } catch (error) {\n      return handleApiError(error);\n    }\n  },\n  \n  put: async (url, data = {}, config = {}) => {\n    try {\n      // Special handling for FormData (file uploads)\n      if (data instanceof FormData) {\n        const response = await api.put(url, data, {\n          ...config,\n          headers: {\n            ...config.headers,\n            'Content-Type': 'multipart/form-data',\n          },\n          withCredentials: true,\n        });\n        return { success: true, data: response };\n      }\n      \n      // For regular JSON data\n      const response = await api.put(url, data, {\n        ...config,\n        headers: {\n          'Content-Type': 'application/json',\n          ...config.headers,\n        },\n        withCredentials: true,\n      });\n      \n      return { \n        success: true, \n        data: response,\n        status: response.status,\n        statusText: response.statusText\n      };\n    } catch (error) {\n      console.error('PUT request failed:', {\n        url,\n        error: error.response?.data || error.message,\n        status: error.response?.status,\n        config: error.config\n      });\n      return handleApiError(error);\n    }\n  },\n  \n  delete: async (url, config = {}) => {\n    try {\n      const response = await api.delete(url, config);\n      return { success: true, data: response };\n    } catch (error) {\n      return handleApiError(error);\n    }\n  },\n  \n  // Add other HTTP methods as needed\n};\n\nexport default apiClient;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}