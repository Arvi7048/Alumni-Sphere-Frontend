{"ast":null,"code":"import{API_CONFIG}from\"../config/config\";// Build an absolute URL for images/assets returned by the API\n// Examples of input path:\n// - \"http://cdn.example.com/file.jpg\" -> returned as-is\n// - \"/uploads/profiles/file.jpg\" -> BASE_URL + path\n// - \"uploads/profiles/file.jpg\" -> BASE_URL + \"/\" + path\nexport function getImageUrl(path){if(!path)return\"\";if(typeof path!==\"string\")return\"\";// Already absolute\nif(path.startsWith(\"http://\")||path.startsWith(\"https://\"))return path;// Preserve any query string\nconst[rawPath,query=\"\"]=path.split(\"?\");// Remove any accidental API prefix\nlet cleaned=rawPath;// If stored as full API_BASE_URL + /uploads/..., strip it\nif(cleaned.startsWith(API_CONFIG.API_BASE_URL)){cleaned=cleaned.replace(API_CONFIG.API_BASE_URL,\"\");}// If it starts with /api/..., strip the /api prefix\nif(cleaned.startsWith(\"/api/\")){cleaned=cleaned.replace(\"/api\",\"\");}// Ensure leading slash\nconst normalized=cleaned.startsWith(\"/\")?cleaned:\"/\".concat(cleaned);// If this is an app-static asset (e.g., /placeholder.svg), do NOT prefix BASE_URL.\n// Only prefix BASE_URL for backend-served paths like /uploads/...\nif(!normalized.startsWith(\"/uploads/\")){// Return as-is so it resolves against the frontend origin\nreturn query?\"\".concat(normalized,\"?\").concat(query):normalized;}// Backend-served uploads should be absolute to API base host\nconst url=\"\".concat(API_CONFIG.BASE_URL).concat(normalized);return query?\"\".concat(url,\"?\").concat(query):url;}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}