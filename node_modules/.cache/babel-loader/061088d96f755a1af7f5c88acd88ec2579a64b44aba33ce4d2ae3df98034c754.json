{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\arvin\\\\OneDrive\\\\Desktop\\\\project2\\\\alumni-verse\\\\frontend\\\\src\\\\context\\\\NotificationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport { useAuth } from \"./AuthContext\";\nimport api from \"../utils/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const {\n    isAuthenticated\n  } = useAuth();\n  useEffect(() => {\n    if (isAuthenticated) {\n      fetchNotifications();\n    }\n  }, [isAuthenticated]);\n  const fetchNotifications = async () => {\n    try {\n      const res = await api.get(\"/notifications\");\n      if (res.success) {\n        const notifications = res.data.notifications || [];\n        setNotifications(notifications);\n        setUnreadCount(res.data.unreadCount || notifications.filter(n => !n.isRead).length);\n      } else {\n        throw new Error(res.error || 'Failed to fetch notifications');\n      }\n    } catch (error) {\n      console.error(\"Failed to fetch notifications:\", error);\n    }\n  };\n  const markAsRead = async notificationId => {\n    try {\n      const res = await api.put(`/notifications/${notificationId}/read`);\n      if (!res.success) throw new Error(res.error || 'Failed to mark as read');\n      setNotifications(prev => prev.map(n => n._id === notificationId ? {\n        ...n,\n        isRead: true\n      } : n));\n      setUnreadCount(prev => Math.max(0, prev - 1));\n    } catch (error) {\n      console.error(\"Failed to mark notification as read:\", error);\n    }\n  };\n  const markAllAsRead = async () => {\n    try {\n      const res = await api.put(\"/notifications/read-all\");\n      if (!res.success) throw new Error(res.error || 'Failed to mark all as read');\n      setNotifications(prev => prev.map(n => ({\n        ...n,\n        isRead: true\n      })));\n      setUnreadCount(0);\n    } catch (error) {\n      console.error(\"Failed to mark all notifications as read:\", error);\n    }\n  };\n  const addNotification = notification => {\n    setNotifications(prev => [notification, ...prev]);\n    if (!notification.isRead) {\n      setUnreadCount(prev => prev + 1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: {\n      notifications,\n      unreadCount,\n      fetchNotifications,\n      markAsRead,\n      markAllAsRead,\n      addNotification\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(NotificationProvider, \"CRxeqlnFZwbACUWbDqaZroxsj/c=\", false, function () {\n  return [useAuth];\n});\n_c = NotificationProvider;\nexport const useNotifications = () => {\n  _s2();\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error(\"useNotifications must be used within a NotificationProvider\");\n  }\n  return context;\n};\n_s2(useNotifications, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","_s2","createContext","useContext","useState","useEffect","useAuth","api","jsxDEV","_jsxDEV","NotificationContext","NotificationProvider","children","notifications","setNotifications","unreadCount","setUnreadCount","isAuthenticated","fetchNotifications","res","get","success","data","filter","n","isRead","length","Error","error","console","markAsRead","notificationId","put","prev","map","_id","Math","max","markAllAsRead","addNotification","notification","Provider","value","fileName","lineNumber","columnNumber","_c","useNotifications","context","$RefreshReg$"],"sources":["C:/Users/arvin/OneDrive/Desktop/project2/alumni-verse/frontend/src/context/NotificationContext.js"],"sourcesContent":["\"use client\"\n\nimport { createContext, useContext, useState, useEffect } from \"react\"\nimport { useAuth } from \"./AuthContext\"\nimport api from \"../utils/api\"\n\nconst NotificationContext = createContext()\n\nexport const NotificationProvider = ({ children }) => {\n  const [notifications, setNotifications] = useState([])\n  const [unreadCount, setUnreadCount] = useState(0)\n  const { isAuthenticated } = useAuth()\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      fetchNotifications()\n    }\n  }, [isAuthenticated])\n\n  const fetchNotifications = async () => {\n    try {\n      const res = await api.get(\"/notifications\")\n      if (res.success) {\n        const notifications = res.data.notifications || []\n        setNotifications(notifications)\n        setUnreadCount(res.data.unreadCount || notifications.filter((n) => !n.isRead).length)\n      } else {\n        throw new Error(res.error || 'Failed to fetch notifications')\n      }\n    } catch (error) {\n      console.error(\"Failed to fetch notifications:\", error)\n    }\n  }\n\n  const markAsRead = async (notificationId) => {\n    try {\n      const res = await api.put(`/notifications/${notificationId}/read`)\n      if (!res.success) throw new Error(res.error || 'Failed to mark as read')\n      setNotifications((prev) => prev.map((n) => (n._id === notificationId ? { ...n, isRead: true } : n)))\n      setUnreadCount((prev) => Math.max(0, prev - 1))\n    } catch (error) {\n      console.error(\"Failed to mark notification as read:\", error)\n    }\n  }\n\n  const markAllAsRead = async () => {\n    try {\n      const res = await api.put(\"/notifications/read-all\")\n      if (!res.success) throw new Error(res.error || 'Failed to mark all as read')\n      setNotifications((prev) => prev.map((n) => ({ ...n, isRead: true })))\n      setUnreadCount(0)\n    } catch (error) {\n      console.error(\"Failed to mark all notifications as read:\", error)\n    }\n  }\n\n  const addNotification = (notification) => {\n    setNotifications((prev) => [notification, ...prev])\n    if (!notification.isRead) {\n      setUnreadCount((prev) => prev + 1)\n    }\n  }\n\n  return (\n    <NotificationContext.Provider\n      value={{\n        notifications,\n        unreadCount,\n        fetchNotifications,\n        markAsRead,\n        markAllAsRead,\n        addNotification,\n      }}\n    >\n      {children}\n    </NotificationContext.Provider>\n  )\n}\n\nexport const useNotifications = () => {\n  const context = useContext(NotificationContext)\n  if (!context) {\n    throw new Error(\"useNotifications must be used within a NotificationProvider\")\n  }\n  return context\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}