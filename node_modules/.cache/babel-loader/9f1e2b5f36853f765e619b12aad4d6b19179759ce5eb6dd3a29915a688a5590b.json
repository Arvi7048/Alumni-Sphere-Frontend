{"ast":null,"code":"import { API_CONFIG } from \"../config/config\";\n\n// Build an absolute URL for images/assets returned by the API\n// Examples of input path:\n// - \"http://cdn.example.com/file.jpg\" -> returned as-is\n// - \"/uploads/profiles/file.jpg\" -> BASE_URL + path\n// - \"uploads/profiles/file.jpg\" -> BASE_URL + \"/\" + path\nexport function getImageUrl(path) {\n  if (!path) return \"\";\n  if (typeof path !== \"string\") return \"\";\n\n  // Already absolute\n  if (path.startsWith(\"http://\") || path.startsWith(\"https://\")) return path;\n\n  // Preserve any query string\n  const [rawPath, query = \"\"] = path.split(\"?\");\n\n  // Remove any accidental API prefix\n  let cleaned = rawPath;\n  // If stored as full API_BASE_URL + /uploads/..., strip it\n  if (cleaned.startsWith(API_CONFIG.API_BASE_URL)) {\n    cleaned = cleaned.replace(API_CONFIG.API_BASE_URL, \"\");\n  }\n  // If it starts with /api/..., strip the /api prefix\n  if (cleaned.startsWith(\"/api/\")) {\n    cleaned = cleaned.replace(\"/api\", \"\");\n  }\n\n  // Ensure leading slash\n  const normalized = cleaned.startsWith(\"/\") ? cleaned : `/${cleaned}`;\n\n  // If this is an app-static asset (e.g., /placeholder.svg), do NOT prefix BASE_URL.\n  // Only prefix BASE_URL for backend-served paths like /uploads/...\n  if (!normalized.startsWith(\"/uploads/\")) {\n    // Return as-is so it resolves against the frontend origin\n    return query ? `${normalized}?${query}` : normalized;\n  }\n\n  // Backend-served uploads should be absolute to API base host\n  const url = `${API_CONFIG.BASE_URL}${normalized}`;\n  return query ? `${url}?${query}` : url;\n}","map":{"version":3,"names":["API_CONFIG","getImageUrl","path","startsWith","rawPath","query","split","cleaned","API_BASE_URL","replace","normalized","url","BASE_URL"],"sources":["C:/Users/arvin/OneDrive/Desktop/project2/alumni-verse/frontend/src/utils/image.js"],"sourcesContent":["import { API_CONFIG } from \"../config/config\";\n\n// Build an absolute URL for images/assets returned by the API\n// Examples of input path:\n// - \"http://cdn.example.com/file.jpg\" -> returned as-is\n// - \"/uploads/profiles/file.jpg\" -> BASE_URL + path\n// - \"uploads/profiles/file.jpg\" -> BASE_URL + \"/\" + path\nexport function getImageUrl(path) {\n  if (!path) return \"\";\n  if (typeof path !== \"string\") return \"\";\n\n  // Already absolute\n  if (path.startsWith(\"http://\") || path.startsWith(\"https://\")) return path;\n\n  // Preserve any query string\n  const [rawPath, query = \"\"] = path.split(\"?\");\n\n  // Remove any accidental API prefix\n  let cleaned = rawPath;\n  // If stored as full API_BASE_URL + /uploads/..., strip it\n  if (cleaned.startsWith(API_CONFIG.API_BASE_URL)) {\n    cleaned = cleaned.replace(API_CONFIG.API_BASE_URL, \"\");\n  }\n  // If it starts with /api/..., strip the /api prefix\n  if (cleaned.startsWith(\"/api/\")) {\n    cleaned = cleaned.replace(\"/api\", \"\");\n  }\n\n  // Ensure leading slash\n  const normalized = cleaned.startsWith(\"/\") ? cleaned : `/${cleaned}`;\n\n  // If this is an app-static asset (e.g., /placeholder.svg), do NOT prefix BASE_URL.\n  // Only prefix BASE_URL for backend-served paths like /uploads/...\n  if (!normalized.startsWith(\"/uploads/\")) {\n    // Return as-is so it resolves against the frontend origin\n    return query ? `${normalized}?${query}` : normalized;\n  }\n\n  // Backend-served uploads should be absolute to API base host\n  const url = `${API_CONFIG.BASE_URL}${normalized}`;\n  return query ? `${url}?${query}` : url;\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,kBAAkB;;AAE7C;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAACC,IAAI,EAAE;EAChC,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;EACpB,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE,OAAO,EAAE;;EAEvC;EACA,IAAIA,IAAI,CAACC,UAAU,CAAC,SAAS,CAAC,IAAID,IAAI,CAACC,UAAU,CAAC,UAAU,CAAC,EAAE,OAAOD,IAAI;;EAE1E;EACA,MAAM,CAACE,OAAO,EAAEC,KAAK,GAAG,EAAE,CAAC,GAAGH,IAAI,CAACI,KAAK,CAAC,GAAG,CAAC;;EAE7C;EACA,IAAIC,OAAO,GAAGH,OAAO;EACrB;EACA,IAAIG,OAAO,CAACJ,UAAU,CAACH,UAAU,CAACQ,YAAY,CAAC,EAAE;IAC/CD,OAAO,GAAGA,OAAO,CAACE,OAAO,CAACT,UAAU,CAACQ,YAAY,EAAE,EAAE,CAAC;EACxD;EACA;EACA,IAAID,OAAO,CAACJ,UAAU,CAAC,OAAO,CAAC,EAAE;IAC/BI,OAAO,GAAGA,OAAO,CAACE,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;EACvC;;EAEA;EACA,MAAMC,UAAU,GAAGH,OAAO,CAACJ,UAAU,CAAC,GAAG,CAAC,GAAGI,OAAO,GAAG,IAAIA,OAAO,EAAE;;EAEpE;EACA;EACA,IAAI,CAACG,UAAU,CAACP,UAAU,CAAC,WAAW,CAAC,EAAE;IACvC;IACA,OAAOE,KAAK,GAAG,GAAGK,UAAU,IAAIL,KAAK,EAAE,GAAGK,UAAU;EACtD;;EAEA;EACA,MAAMC,GAAG,GAAG,GAAGX,UAAU,CAACY,QAAQ,GAAGF,UAAU,EAAE;EACjD,OAAOL,KAAK,GAAG,GAAGM,GAAG,IAAIN,KAAK,EAAE,GAAGM,GAAG;AACxC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}