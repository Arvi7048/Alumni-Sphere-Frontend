{"ast":null,"code":"\"use client\";import _objectSpread from\"C:/Users/arvin/OneDrive/Desktop/project2/alumni-verse/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{createContext,useContext,useState,useEffect}from\"react\";import{useAuth}from\"./AuthContext\";import api from\"../utils/api\";import{jsx as _jsx}from\"react/jsx-runtime\";const NotificationContext=/*#__PURE__*/createContext();export const NotificationProvider=_ref=>{let{children}=_ref;const[notifications,setNotifications]=useState([]);const[unreadCount,setUnreadCount]=useState(0);const{isAuthenticated}=useAuth();useEffect(()=>{if(isAuthenticated){fetchNotifications();}},[isAuthenticated]);const fetchNotifications=async()=>{try{const res=await api.get(\"/notifications\");if(res.success){const notifications=res.data.notifications||[];setNotifications(notifications);setUnreadCount(res.data.unreadCount||notifications.filter(n=>!n.isRead).length);}else{throw new Error(res.error||'Failed to fetch notifications');}}catch(error){console.error(\"Failed to fetch notifications:\",error);}};const markAsRead=async notificationId=>{try{const res=await api.put(\"/notifications/\".concat(notificationId,\"/read\"));if(!res.success)throw new Error(res.error||'Failed to mark as read');setNotifications(prev=>prev.map(n=>n._id===notificationId?_objectSpread(_objectSpread({},n),{},{isRead:true}):n));setUnreadCount(prev=>Math.max(0,prev-1));}catch(error){console.error(\"Failed to mark notification as read:\",error);}};const markAllAsRead=async()=>{try{const res=await api.put(\"/notifications/read-all\");if(!res.success)throw new Error(res.error||'Failed to mark all as read');setNotifications(prev=>prev.map(n=>_objectSpread(_objectSpread({},n),{},{isRead:true})));setUnreadCount(0);}catch(error){console.error(\"Failed to mark all notifications as read:\",error);}};const addNotification=notification=>{setNotifications(prev=>[notification,...prev]);if(!notification.isRead){setUnreadCount(prev=>prev+1);}};return/*#__PURE__*/_jsx(NotificationContext.Provider,{value:{notifications,unreadCount,fetchNotifications,markAsRead,markAllAsRead,addNotification},children:children});};export const useNotifications=()=>{const context=useContext(NotificationContext);if(!context){throw new Error(\"useNotifications must be used within a NotificationProvider\");}return context;};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}